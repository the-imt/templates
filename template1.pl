#!/usr/bin/perl

=head1 NAME

template1.pl

=head1 SYNOPSIS

template.pl

No other options or parameters available.  It's expecting to be called as a fastcgi
script from Apache.  Or whatever a hosting provider does.

=head1 DESCRIPTION

This applicaton reads in a configuration file, as provided.  It then does a bunch of
different thngs to build a web page.  It's expecting to run under factcgi.


=head1 GENERATED BY

Some guy with a keyboard

=head1 AUTHOR

Colin Wass

=head1 LICENSE


Copyright (c) 2016, Colin Wass, CFTech.ca
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or
promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

=cut



package template1::main;

BEGIN{use lib qw(./lib);}

use Template;
use Try::Tiny;

use libtemplate1;

#Start here
try{

	my $Starter = libtemplate1->new(config_file => '.cfg/template1.cfg');
	my $Template = Template->new();

	$Starter->dropheader();	
	$Template->process($Starter->TemplateFile(), $Starter->TemplateStash) || die $Template->error();
	

} catch {
	#This gets replaced with a template error dump
	warn "Caught something horrible flying by: $_";
};
